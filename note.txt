Groovy

1. Introduction 

* Java like and java compatiable syntax 
* It run on Java platform 
Groovy is powerful, optionally typed and dynamic language 
with static-typing and static complination

2. Hello world

    using java like syntax

    using dynamic syntax

3. variable
    how to define variables

    how to name variables
        - use letters, digits and underscore 
        - case sensitive like java
        
    multiple assignments
        - dynamically typed language

3. Data Types

    variables are used to store information and 
    this information can be of diff type 

    It is similar to java

    byte
    short
    int 
    double 
    long
    float
    char
    boolean
    string

4. Operators
    https://groovy-lang.org/operators.html

    1. Airthmetic
        Normal
        unary
        assignment
    2. Relational 
    3. Logical
        precedence
        short circuit
    4. bitwise

    5. Conditional
        not
        ternary
        elvis
        elvis assignment

5. Control Structures

    5.1 Conditional Statement
        5.1.1 If-else
            1. If
                if (...) {

                }

            2. If else
                if ( ... ) {

                }
                else {

                }

            3. nested is else

                if ( ... ) {
                    ...
                } else if (...) {
                    ...
                } else {
                    ...
                }

        5.1.2 switch case

    5.2 Looping 
        5.2.1 classic for
        5.2.2 for in 
        5.2.3 for each
        5.2.4 each
        5.2.5 while
        5.2.6 do-while

        ---- some looping keywords ----
        upto
        times
        step

    5.3 Exception handling
        try-catch
        try-finally
        try-catch-finally


6. Strings: https://groovy-lang.org/syntax.html#all-strings

                                  Syntax           Multiline      Interpolation    Escape character
                                        
    - single quoted i.e.          '....'           No              No               \
    - double quoted i.e.          "...."           No              Yes              \
    - triple single quoted i.e.   ''' .... '''     Yes             No               \
    - triple double quoted i.e.   """ .... """     Yes             Yes              \
    - slashy  i.e.                /...../          Yes             Yes              \
    - dollar slashy               $/......$/       Yes             Yes              $



7. Lists

    - It is collection
    - It is structure to store collection of data item

    syntax :
        [ obj1 , obj2 , obj3 ] 

        - obj can be of any data type

        e.g. 

            1. empty list 

                []


            2. list of single data type (homogenous list):

                [1,2,3] - list of integers

                ["mango" , "apple" , "banana" ] - list of string

            
            3. list of different data types (hetrogenous list):
                [1 , 1.2, "groovy" , 'A' ]

            
            4. Nested list (list inside list):

                [ 1, 2, ["mango" , "apple" , "banana" ], 3]



8. Maps

    - Map is unordered collection of object references
    - The elements in a Map collection are accessed by a key value. 
    - The keys used in a Map can be of any class. 
    - When we insert into a Map collection, two values are required: 
        the key and the value.
    - Syntax:

        [ key : value ]
        e.g. [ 'name' : 'Akash' ]

        [:] -> empty Map


9. Ranges
    - creates a list of sequential values
    - A range is shorthand for specifying a sequence of values. 
    - A Range is denoted by the first and last values in the sequence, and Range can be inclusive or exclusive. 
    - An inclusive Range includes all the values from the first to the last, while an exclusive Range includes all values except the last.
    - examples:
        * 1..10 - An example of an inclusive Range
        * 1..<10 - An example of an exclusive Range
        * 'a'..'x' – Ranges can also consist of characters
        * 10..1 – Ranges can also be in descending order
        * 'x'..'a' – Ranges can also consist of characters and be in descending order.


10. Methods
    
    - What is Method
        * named block of code
        * makes code modular and reusable
        * can take parameters
        * can have a return type

    - How to create Method
    - Method parameters
    - Return type
    - Instance method

11. Closures

    - What are Closures
        Block of code that can
        * take parameters
        * refer variables
        * return values
        * can be passed as parameters in a method

    - How to use Closures
    - Why do we need Closures
        https://marketsplash.com/tutorials/groovy/groovy-closures/#link8



12. Input & Output 

    1. Console
        - Read from STDIN in Groovy
        - Read from Console in Groovy
        - Conversion

    2. Files
        - Reading
            * Read file as Strings
            * Read file as List
            * Read file as Array
            * Read file line by line
            * Delete file

        - Writing
            * Writing Files
            * Cloning Files
            * Renaming

13. Special Files
    1. Json
        * reading json string
        * reading json file
        * parsing api response

